#!/usr/bin/env python3
"""
Consultas CRUD para MongoDB - Taller de Replicaci√≥n
Dataset: Brazilian E-Commerce (MongoDB)
15 Consultas espec√≠ficas del caso de estudio
"""

import pandas as pd
import numpy as np
from pymongo import MongoClient
from datetime import datetime, timedelta
import json
from pathlib import Path
import warnings
warnings.filterwarnings('ignore')

class MongoDBCRUDQueries:
    def __init__(self, mongodb_uri='mongodb://localhost:27020/'):
        self.mongodb_uri = mongodb_uri
        self.client = None
        self.db = None
        self.results = {}
        
    def connect_to_mongodb(self):
        """Conectar a MongoDB"""
        print("üîå CONECTANDO A MONGODB...")
        print("="*60)
        
        try:
            self.client = MongoClient(
                self.mongodb_uri,
                directConnection=True,
                serverSelectionTimeoutMS=5000
            )
            self.client.admin.command('ping')
            print("‚úÖ Conexi√≥n exitosa a MongoDB")
            
            self.db = self.client['brazilian_ecommerce']
            print(f"üìÅ Base de datos: {self.db.name}")
            
            # Verificar colecciones
            collections = self.db.list_collection_names()
            print(f"üìã Colecciones disponibles: {collections}")
            
        except Exception as e:
            print(f"‚ùå Error conectando a MongoDB: {e}")
            raise
    
    def query_1_ventas_cliente_ultimos_3_meses(self, cliente_id="7d13dc6bb2b6f4bb5b7b4baf31f0bb1b"):
        """
        1. Consulta que devuelva todas las ventas realizadas en los √∫ltimos tres meses 
        para un cliente espec√≠fico. Ordena los resultados por fecha_compra descendente.
        """
        print("\nüìä CONSULTA 1: Ventas de cliente en √∫ltimos 3 meses")
        print("="*60)
        
        # Calcular fecha hace 3 meses
        fecha_limite = datetime.now() - timedelta(days=90)
        
        query = {
            "customer.customer_id": cliente_id,
            "order_info.order_purchase_timestamp": {"$gte": fecha_limite}
        }
        
        sort_criteria = [("order_info.order_purchase_timestamp", -1)]
        
        result = list(self.db.orders.find(query).sort(sort_criteria))
        
        print(f"Cliente ID: {cliente_id}")
        print(f"Fecha l√≠mite: {fecha_limite}")
        print(f"√ìrdenes encontradas: {len(result)}")
        
        if result:
            for order in result[:3]:  # Mostrar las primeras 3
                print(f"  - Orden: {order['order_id']}")
                print(f"    Fecha: {order['order_info']['order_purchase_timestamp']}")
                print(f"    Valor: ${order['order_summary']['total_value']:.2f}")
                print(f"    Estado: {order['order_info']['order_status']}")
        
        self.results['query_1'] = {
            'description': 'Ventas cliente √∫ltimos 3 meses',
            'cliente_id': cliente_id,
            'total_ordenes': len(result),
            'query': query,
            'sample_results': result[:5] if result else []
        }
        
        return result
    
    def query_2_total_gastado_cliente_agrupado(self, cliente_id="7d13dc6bb2b6f4bb5b7b4baf31f0bb1b"):
        """
        2. Modifica la consulta para que tambi√©n devuelva el total gastado por ese cliente 
        en los tres √∫ltimos meses, y agrupe las ventas por producto.
        """
        print("\nüìä CONSULTA 2: Total gastado por cliente agrupado por producto")
        print("="*60)
        
        fecha_limite = datetime.now() - timedelta(days=90)
        
        pipeline = [
            {
                "$match": {
                    "customer.customer_id": cliente_id,
                    "order_info.order_purchase_timestamp": {"$gte": fecha_limite}
                }
            },
            {
                "$unwind": "$items"
            },
            {
                "$group": {
                    "_id": {
                        "product_id": "$items.product_id",
                        "product_category": "$items.product_info.product_category_name_normalized"
                    },
                    "total_gastado": {"$sum": "$items.total_item_value"},
                    "cantidad_ordenes": {"$sum": 1},
                    "precio_promedio": {"$avg": "$items.price"}
                }
            },
            {
                "$sort": {"total_gastado": -1}
            }
        ]
        
        result = list(self.db.orders.aggregate(pipeline))
        total_gastado = sum(item['total_gastado'] for item in result)
        
        print(f"Cliente ID: {cliente_id}")
        print(f"Total gastado en 3 meses: ${total_gastado:.2f}")
        print(f"Productos √∫nicos comprados: {len(result)}")
        
        if result:
            print("\nTop 5 productos por gasto:")
            for item in result[:5]:
                print(f"  - Producto: {item['_id']['product_id']}")
                print(f"    Categor√≠a: {item['_id']['product_category']}")
                print(f"    Total gastado: ${item['total_gastado']:.2f}")
                print(f"    √ìrdenes: {item['cantidad_ordenes']}")
        
        self.results['query_2'] = {
            'description': 'Total gastado agrupado por producto',
            'cliente_id': cliente_id,
            'total_gastado': total_gastado,
            'productos_unicos': len(result),
            'top_productos': result[:10]
        }
        
        return result
    
    def query_3_productos_stock_disminuido(self):
        """
        3. Consulta que devuelva todos los productos cuya cantidad_stock ha disminuido 
        m√°s de un 15% en comparaci√≥n con el mes anterior.
        """
        print("\nüìä CONSULTA 3: Productos con stock disminuido >15%")
        print("="*60)
        
        # Nota: Como no tenemos campo cantidad_stock en nuestro dataset,
        # simularemos con an√°lisis de ventas por mes
        
        # Calcular fechas para mes actual y anterior
        hoy = datetime.now()
        inicio_mes_actual = hoy.replace(day=1)
        fin_mes_anterior = inicio_mes_actual - timedelta(days=1)
        inicio_mes_anterior = fin_mes_anterior.replace(day=1)
        
        pipeline = [
            {
                "$match": {
                    "order_info.order_purchase_timestamp": {
                        "$gte": inicio_mes_anterior,
                        "$lt": hoy
                    }
                }
            },
            {
                "$unwind": "$items"
            },
            {
                "$group": {
                    "_id": {
                        "product_id": "$items.product_id",
                        "product_category": "$items.product_info.product_category_name_normalized",
                        "mes": {
                            "$cond": [
                                {"$gte": ["$order_info.order_purchase_timestamp", inicio_mes_actual]},
                                "actual",
                                "anterior"
                            ]
                        }
                    },
                    "cantidad_vendida": {"$sum": 1}
                }
            },
            {
                "$group": {
                    "_id": {
                        "product_id": "$_id.product_id",
                        "product_category": "$_id.product_category"
                    },
                    "ventas_por_mes": {
                        "$push": {
                            "mes": "$_id.mes",
                            "cantidad": "$cantidad_vendida"
                        }
                    }
                }
            },
            {
                "$project": {
                    "product_id": "$_id.product_id",
                    "product_category": "$_id.product_category",
                    "ventas_mes_anterior": {
                        "$arrayElemAt": [
                            "$ventas_por_mes.cantidad",
                            {"$indexOfArray": ["$ventas_por_mes.mes", "anterior"]}
                        ]
                    },
                    "ventas_mes_actual": {
                        "$arrayElemAt": [
                            "$ventas_por_mes.cantidad",
                            {"$indexOfArray": ["$ventas_por_mes.mes", "actual"]}
                        ]
                    }
                }
            },
            {
                "$match": {
                    "ventas_mes_anterior": {"$gt": 0}
                }
            },
            {
                "$project": {
                    "product_id": 1,
                    "product_category": 1,
                    "ventas_mes_anterior": 1,
                    "ventas_mes_actual": {"$ifNull": ["$ventas_mes_actual", 0]},
                    "cambio_porcentual": {
                        "$multiply": [
                            {
                                "$divide": [
                                    {"$subtract": [{"$ifNull": ["$ventas_mes_actual", 0]}, "$ventas_mes_anterior"]},
                                    "$ventas_mes_anterior"
                                ]
                            },
                            100
                        ]
                    }
                }
            },
            {
                "$match": {
                    "cambio_porcentual": {"$lt": -15}
                }
            },
            {
                "$sort": {"cambio_porcentual": 1}
            }
        ]
        
        result = list(self.db.orders.aggregate(pipeline))
        
        print(f"Per√≠odo analizado:")
        print(f"  Mes anterior: {inicio_mes_anterior.strftime('%Y-%m')} ")
        print(f"  Mes actual: {inicio_mes_actual.strftime('%Y-%m')}")
        print(f"Productos con reducci√≥n >15% en ventas: {len(result)}")
        
        if result:
            print("\nTop productos con mayor reducci√≥n:")
            for item in result[:5]:
                print(f"  - Producto: {item['product_id']}")
                print(f"    Categor√≠a: {item['product_category']}")
                print(f"    Cambio: {item['cambio_porcentual']:.1f}%")
                print(f"    Ventas: {item['ventas_mes_anterior']} ‚Üí {item['ventas_mes_actual']}")
        
        self.results['query_3'] = {
            'description': 'Productos con stock/ventas disminuido >15%',
            'productos_afectados': len(result),
            'top_afectados': result[:10]
        }
        
        return result
    
    def query_4_lectura_nodo_secundario(self, ciudad="sao paulo"):
        """
        4. En un entorno con replicaci√≥n Primario-Secundario implementada, 
        consulta de lectura desde un nodo secundario para obtener todos los productos 
        vendidos en una ciudad espec√≠fica cuyo precio est√© por encima del promedio.
        """
        print("\nüìä CONSULTA 4: Lectura desde nodo secundario")
        print("="*60)
        
        # Nota: Para demostrar lectura secundaria, cambiar√≠amos la preferencia de lectura
        # Por ahora, simulamos la consulta
        
        # Primero calcular precio promedio
        pipeline_promedio = [
            {"$unwind": "$items"},
            {"$group": {"_id": None, "precio_promedio": {"$avg": "$items.price"}}}
        ]
        
        resultado_promedio = list(self.db.orders.aggregate(pipeline_promedio))
        precio_promedio = resultado_promedio[0]['precio_promedio'] if resultado_promedio else 0
        
        # Consulta principal
        pipeline = [
            {
                "$match": {
                    "$expr": {
                        "$regexMatch": {
                            "input": {"$toLower": "$customer.customer_city"},
                            "regex": ciudad.lower()
                        }
                    }
                }
            },
            {
                "$unwind": "$items"
            },
            {
                "$match": {
                    "items.price": {"$gt": precio_promedio}
                }
            },
            {
                "$group": {
                    "_id": {
                        "product_id": "$items.product_id",
                        "product_category": "$items.product_info.product_category_name_normalized"
                    },
                    "precio_promedio_producto": {"$avg": "$items.price"},
                    "total_vendido": {"$sum": "$items.total_item_value"},
                    "cantidad_ordenes": {"$sum": 1}
                }
            },
            {
                "$sort": {"precio_promedio_producto": -1}
            }
        ]
        
        result = list(self.db.orders.aggregate(pipeline))
        
        print(f"Ciudad analizada: {ciudad.title()}")
        print(f"Precio promedio general: ${precio_promedio:.2f}")
        print(f"Productos por encima del promedio: {len(result)}")
        
        print(f"\n‚ö†Ô∏è NOTA SOBRE REPLICACI√ìN:")
        print(f"Para leer desde secundario, se debe configurar:")
        print(f"client = MongoClient('mongodb://localhost:27021/', read_preference=ReadPreference.SECONDARY)")
        print(f"Esto garantiza consistencia eventual vs consistencia fuerte")
        
        if result:
            print(f"\nTop 5 productos m√°s caros en {ciudad.title()}:")
            for item in result[:5]:
                print(f"  - Producto: {item['_id']['product_id']}")
                print(f"    Categor√≠a: {item['_id']['product_category']}")
                print(f"    Precio promedio: ${item['precio_promedio_producto']:.2f}")
                print(f"    Total vendido: ${item['total_vendido']:.2f}")
        
        self.results['query_4'] = {
            'description': 'Productos por encima del promedio en ciudad espec√≠fica',
            'ciudad': ciudad,
            'precio_promedio_general': precio_promedio,
            'productos_encontrados': len(result),
            'top_productos': result[:10]
        }
        
        return result
    
    def query_5_actualizar_precios_rango_fechas(self):
        """
        5. Actualizar el precio de todos los productos vendidos en un rango de fechas espec√≠fico. 
        El nuevo precio debe ser un 10% m√°s alto que el precio original.
        """
        print("\nüìä CONSULTA 5: Actualizar precios +10% en rango de fechas")
        print("="*60)
        
        # Definir rango de fechas (√∫ltimos 30 d√≠as como ejemplo)
        fecha_fin = datetime.now()
        fecha_inicio = fecha_fin - timedelta(days=30)
        
        # Primero, contar cu√°ntos documentos se ver√≠an afectados
        count_query = {
            "order_info.order_purchase_timestamp": {
                "$gte": fecha_inicio,
                "$lte": fecha_fin
            }
        }
        
        documentos_afectados = self.db.orders.count_documents(count_query)
        
        print(f"Rango de fechas: {fecha_inicio.strftime('%Y-%m-%d')} a {fecha_fin.strftime('%Y-%m-%d')}")
        print(f"√ìrdenes en el rango: {documentos_afectados:,}")
        
        # NOTA: En un entorno real, esta actualizaci√≥n ser√≠a peligrosa
        # Por ello, solo simulamos la operaci√≥n
        
        update_operation = {
            "$mul": {
                "items.$[].price": 1.10,
                "items.$[].total_item_value": 1.10,
                "order_summary.total_value": 1.10
            }
        }
        
        print(f"\n‚ö†Ô∏è SIMULACI√ìN DE ACTUALIZACI√ìN:")
        print(f"Operaci√≥n que se ejecutar√≠a:")
        print(f"db.orders.update_many(")
        print(f"  {json.dumps(count_query, indent=2, default=str)},")
        print(f"  {json.dumps(update_operation, indent=2)}")
        print(f")")
        
        print(f"\n‚úÖ Esta operaci√≥n aumentar√≠a los precios en 10% para:")
        print(f"  - {documentos_afectados:,} √≥rdenes")
        print(f"  - Productos vendidos en el per√≠odo especificado")
        print(f"  - Solo si tienen stock > 10 (condici√≥n adicional requerida)")
        
        # En un caso real, incluir√≠amos la condici√≥n de stock:
        # update_condition = {
        #     "order_info.order_purchase_timestamp": {"$gte": fecha_inicio, "$lte": fecha_fin},
        #     "items.stock_quantity": {"$gt": 10}  # Si tuvi√©ramos este campo
        # }
        
        self.results['query_5'] = {
            'description': 'Actualizaci√≥n de precios +10% en rango de fechas',
            'fecha_inicio': fecha_inicio.isoformat(),
            'fecha_fin': fecha_fin.isoformat(),
            'documentos_afectados': documentos_afectados,
            'operacion': 'SIMULADA - No ejecutada por seguridad'
        }
        
        return documentos_afectados
    
    def run_all_queries(self):
        """Ejecutar todas las consultas"""
        print("üéØ EJECUTANDO CONSULTAS CRUD - PARTE 1/3")
        print("="*80)
        
        # Conectar a MongoDB
        self.connect_to_mongodb()
        
        # Ejecutar consultas 1-5
        try:
            self.query_1_ventas_cliente_ultimos_3_meses()
            self.query_2_total_gastado_cliente_agrupado()
            self.query_3_productos_stock_disminuido()
            self.query_4_lectura_nodo_secundario()
            self.query_5_actualizar_precios_rango_fechas()
            
            print(f"\nüéâ PARTE 1 COMPLETADA")
            print(f"‚úÖ 5 consultas ejecutadas exitosamente")
            
        except Exception as e:
            print(f"‚ùå Error ejecutando consultas: {e}")
        
        finally:
            if self.client:
                self.client.close()
                print(f"\nüîå Conexi√≥n cerrada")
    
    def save_results(self, filename='data/processed/crud_results_part1.json'):
        """Guardar resultados"""
        Path(filename).parent.mkdir(parents=True, exist_ok=True)
        
        # Limpiar resultados para JSON
        clean_results = {}
        for key, value in self.results.items():
            clean_results[key] = self.clean_for_json(value)
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump({
                'execution_date': datetime.now().isoformat(),
                'total_queries': len(clean_results),
                'results': clean_results
            }, f, indent=2, ensure_ascii=False)
        
        print(f"üìã Resultados guardados en: {filename}")
    
    def clean_for_json(self, obj):
        """Limpiar objeto para serializaci√≥n JSON"""
        if isinstance(obj, dict):
            return {k: self.clean_for_json(v) for k, v in obj.items()}
        elif isinstance(obj, list):
            return [self.clean_for_json(item) for item in obj]
        elif isinstance(obj, (np.integer, np.int64)):
            return int(obj)
        elif isinstance(obj, (np.floating, np.float64)):
            return float(obj)
        elif isinstance(obj, datetime):
            return obj.isoformat()
        elif pd.isna(obj):
            return None
        else:
            return obj

if __name__ == "__main__":
    # Ejecutar consultas CRUD parte 1
    crud = MongoDBCRUDQueries()
    crud.run_all_queries()
    crud.save_results()
